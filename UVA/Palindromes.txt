#include <iostream>
#include <bits/stdc++.h>
using namespace std;


bool isPalindrome(string &s) {
    int i = 0;
    int j = s.size() - 1;
    while(i <= j) {
        if(s[i] != s[j]) {
            return false;
        }
        i++;
        j--;
    }
    return true;
}


void solve() {
    map<char,char> mirror;
    mirror['A'] = 'A';
    mirror['E'] = '3';
    mirror['H'] = 'H';
    mirror['I'] = 'I';
    mirror['J'] = 'L';
    mirror['L'] = 'J';
    mirror['M'] = 'M';
    mirror['O'] = 'O';
    mirror['S'] = '2';
    mirror['T'] = 'T';
    mirror['U'] = 'U';
    mirror['V'] = 'V';
    mirror['W'] = 'W';
    mirror['X'] = 'X';
    mirror['Y'] = 'Y';
    mirror['Z'] = '5';
    mirror['1'] = '1';
    mirror['2'] = 'S';
    mirror['3'] = 'E';
    mirror['5'] = 'Z';
    mirror['8'] = '8';
    string s;
    while(getline(cin, s)) {
        if(cin.bad() || s.size() == 0) break;
        string m = "";
        bool isM = false;
        int vm = true;
        bool isP = false;
        for(int i = s.size() - 1; i >= 0; i--) {
            if(mirror.find(s[i]) != mirror.end()) {
                m+= mirror[s[i]];
            } else {
                vm = false;
                break;
            }
        }


        if(s == m && vm) {
            isM = true;
        }

        if(isPalindrome(s)) {
            isP = true;
        }


        if(isP) {
            if(isM) {
                cout << s << " -- is a mirrored palindrome." << endl;
            } else {
                cout << s << " -- is a regular palindrome." << endl;
            }
        } else {
            if(isM) {
                cout << s << " -- is a mirrored string." << endl;
            } else {
                cout << s << " -- is not a palindrome." << endl;
            }
        }
        cout << endl;
    }
}


int main() {
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);

    solve();

    return 0;
}

